generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model Role {
  id     Int     @id
  name   String  @db.NVarChar(20)
  note   String? @db.NVarChar(255)
  isUsed Boolean @default(true)
  Users  User[]
}

model User {
  id            Int            @id @unique @default(autoincrement())
  name          String         @db.NVarChar(30)
  userName      String         @unique @db.VarChar(30)
  phone         Int
  utvar         Int
  password      String         @db.NVarChar(255)
  roleId        Int
  createdAt     DateTime       @default(now()) @db.DateTimeOffset
  updatedAt     DateTime       @default(now()) @db.DateTimeOffset
  note          String?        @db.NVarChar(255)
  isUsed        Boolean        @default(true)
  role          Role           @relation(fields: [roleId], references: [id])
  LicenseEvents LicenseEvent[]
}

model Contract {
  id                                      Int       @id @unique @default(autoincrement())
  contractNumber                          String    @unique @db.NVarChar(20)
  platnostSA                              DateTime? @db.Date
  dateOfLifeCycle                         DateTime? @db.Date
  datumUkonceniHlavniFazeTechnickePodpory DateTime? @db.Date
  datumUkonceniPodporyAktualizaceSP1      DateTime? @db.Date
  datumUkonceniPodporyAktualizaceSP2      DateTime? @db.Date
  datumUkonceniPodporyAktualizaceSP3      DateTime? @db.Date
  datumUkonceniPodporyAktualizaceSP4      DateTime? @db.Date
  note                                    String?   @db.NVarChar(255)
  isUsed                                  Boolean   @default(true)
  datumUkonceniRozsirenePodpory           DateTime? @db.Date
  licenses                                License[]
}

model License {
  id                Int            @id @unique @default(autoincrement())
  evidenceNumber    String         @unique @db.NVarChar(50)
  softwareAssurance Boolean
  softwareId        Int
  note              String?        @db.NVarChar(255)
  isUsed            Boolean        @default(true)
  isAssigned        Boolean        @default(false)
  contractId        Int
  contract          Contract       @relation(fields: [contractId], references: [id])
  software          Software       @relation(fields: [softwareId], references: [id])
  licenseEvents     LicenseEvent[]
  stationName       Int?            
  station           Station?        @relation(fields: [stationName], references: [name])
}

model Software {
  id            Int       @id @unique @default(autoincrement())
  name          String    @unique @db.NVarChar(50)
  nameOfProduct String?   @db.NVarChar(50)
  kcm           Float
  partNumber    String?   @db.NVarChar(30)
  note          String?   @db.NVarChar(255)
  isUsed        Boolean   @default(true)
  licenses      License[]
}

model LicenseEvent {
  id                 Int              @id @unique @default(autoincrement())
  note               String?          @db.NVarChar(255)
  isUsed             Boolean          @default(true)
  ticketId           String           @db.NVarChar(20)
  LicenseEventTypeId Int
  assignedAt         DateTime         @default(now()) @db.DateTimeOffset
  assignedByUserId   Int
  licenseId          Int
  stationName        Int
  station            Station          @relation(fields: [stationName], references: [name], onDelete: NoAction, onUpdate: NoAction)
  LicenseEventType   LicenseEventType @relation(fields: [LicenseEventTypeId], references: [id])
  assignedByUser     User             @relation(fields: [assignedByUserId], references: [id])
  license            License          @relation(fields: [licenseId], references: [id])
}

model LicenseEventType {
  id            Int            @id @unique @default(autoincrement())
  value         String         @db.NVarChar(20)
  note          String?        @db.NVarChar(255)
  isUsed        Boolean        @default(true)
  licenceEvents LicenseEvent[]
}

model Station {
  name          Int         @unique @id
  licenseEvents LicenseEvent[]
  licenses      License[]
  note          String?        @db.NVarChar(255)
  isUsed        Boolean        @default(true)
}